student database:
-- STUDENT Table
CREATE TABLE STUDENT (
    USN VARCHAR(10) PRIMARY KEY,
    SName VARCHAR(50),
    Address VARCHAR(100),
    Phone VARCHAR(15),
    Gender CHAR(1)
);

-- SEMSEC Table
CREATE TABLE SEMSEC (
    SSID VARCHAR(10) PRIMARY KEY,
    Sem INT,
    Sec CHAR(1)
);

-- CLASS Table
CREATE TABLE CLASS (
    USN VARCHAR(10),
    SSID VARCHAR(10),
    PRIMARY KEY (USN, SSID),
    FOREIGN KEY (USN) REFERENCES STUDENT(USN),
    FOREIGN KEY (SSID) REFERENCES SEMSEC(SSID)
);

-- SUBJECT Table
CREATE TABLE SUBJECT (
    Subcode VARCHAR(10) PRIMARY KEY,
    Title VARCHAR(100),
    Sem INT,
    Credits INT
);

-- IAMARKS Table
CREATE TABLE IAMARKS (
    USN VARCHAR(10),
    Subcode VARCHAR(10),
    SSID VARCHAR(10),
    Test1 INT,
    Test2 INT,
    Test3 INT,
    FinalIA INT,
    PRIMARY KEY (USN, Subcode, SSID),
    FOREIGN KEY (USN) REFERENCES STUDENT(USN),
    FOREIGN KEY (Subcode) REFERENCES SUBJECT(Subcode),
    FOREIGN KEY (SSID) REFERENCES SEMSEC(SSID)
);
Query1:
SELECT S.*
FROM STUDENT S
JOIN CLASS C ON S.USN = C.USN
JOIN SEMSEC SS ON C.SSID = SS.SSID
WHERE SS.Sem = 4 AND SS.Sec = 'C';
Query2:
SELECT SS.Sem, SS.Sec, S.Gender, COUNT(*) AS Total
FROM STUDENT S
JOIN CLASS C ON S.USN = C.USN
JOIN SEMSEC SS ON C.SSID = SS.SSID
GROUP BY SS.Sem, SS.Sec, S.Gender;
Query3:
CREATE VIEW Test1_Marks_1BI15CS101 AS
SELECT Subcode, Test1
FROM IAMARKS
WHERE USN = '1BI15CS101';
SELECT * FROM Test1_Marks_1BI15CS101;
Query4:
UPDATE IAMARKS
SET FinalIA = (
    SELECT AVG_MARKS FROM (
        SELECT USN, Subcode, SSID,
               (
                 (Test1 + Test2 + Test3) - LEAST(Test1, Test2, Test3)
               ) / 2 AS AVG_MARKS
        FROM IAMARKS
    ) AS IA
    WHERE IAMARKS.USN = IA.USN AND
          IAMARKS.Subcode = IA.Subcode AND
          IAMARKS.SSID = IA.SSID
);
Query5:SELECT S.USN, S.SName, SS.Sem, SS.Sec, IA.FinalIA,
       CASE 
           WHEN IA.FinalIA BETWEEN 17 AND 20 THEN 'Outstanding'
           WHEN IA.FinalIA BETWEEN 12 AND 16 THEN 'Average'
           WHEN IA.FinalIA < 12 THEN 'Weak'
           ELSE 'No Category'
       END AS CAT
FROM STUDENT S
JOIN CLASS C ON S.USN = C.USN
JOIN SEMSEC SS ON C.SSID = SS.SSID
JOIN IAMARKS IA ON S.USN = IA.USN AND C.SSID = IA.SSID
WHERE SS.Sem = 8 AND SS.Sec IN ('A', 'B', 'C');

Library Database:
CREATE TABLE PUBLISHER (
    Name VARCHAR(100) PRIMARY KEY,
    Address VARCHAR(200),
    Phone VARCHAR(15)
);

CREATE TABLE LIBRARY_BRANCH (
    Branch_id INT PRIMARY KEY,
    Branch_Name VARCHAR(100),
    Address VARCHAR(200)
);

CREATE TABLE BOOK (
    Book_id INT PRIMARY KEY,
    Title VARCHAR(200),
    Publisher_Name VARCHAR(100),
    Pub_Year YEAR,
    FOREIGN KEY (Publisher_Name) REFERENCES PUBLISHER(Name)
);

CREATE TABLE BOOK_AUTHORS (
    Book_id INT,
    Author_Name VARCHAR(100),
    PRIMARY KEY (Book_id, Author_Name),
    FOREIGN KEY (Book_id) REFERENCES BOOK(Book_id)
);

CREATE TABLE BOOK_COPIES (
    Book_id INT,
    Branch_id INT,
    No_of_Copies INT,
    PRIMARY KEY (Book_id, Branch_id),
    FOREIGN KEY (Book_id) REFERENCES BOOK(Book_id),
    FOREIGN KEY (Branch_id) REFERENCES LIBRARY_BRANCH(Branch_id)
);

CREATE TABLE BOOK_LENDING (
    Book_id INT,
    Branch_id INT,
    Card_No INT,
    Date_Out DATE,
    Due_Date DATE,
    PRIMARY KEY (Book_id, Branch_id, Card_No),
    FOREIGN KEY (Book_id, Branch_id) REFERENCES BOOK_COPIES(Book_id, Branch_id)
);
Query1:
SELECT 
    B.Book_id, 
    B.Title, 
    B.Publisher_Name, 
    BA.Author_Name, 
    BC.Branch_id, 
    LB.Branch_Name,
    BC.No_of_Copies
FROM 
    BOOK B
JOIN 
    BOOK_AUTHORS BA ON B.Book_id = BA.Book_id
JOIN 
    BOOK_COPIES BC ON B.Book_id = BC.Book_id
JOIN 
    LIBRARY_BRANCH LB ON BC.Branch_id = LB.Branch_id;
query2:
SELECT 
    BL.Card_No, 
    COUNT(*) AS Books_Borrowed
FROM 
    BOOK_LENDING BL
WHERE 
    Date_Out BETWEEN '2017-01-01' AND '2017-06-30'
GROUP BY 
    BL.Card_No
HAVING 
    COUNT(*) > 3;
query3:
-- Step 1: Delete from BOOK_LENDING
DELETE FROM BOOK_LENDING WHERE Book_id = 101;

-- Step 2: Delete from BOOK_COPIES
DELETE FROM BOOK_COPIES WHERE Book_id = 101;

-- Step 3: Delete from BOOK_AUTHORS
DELETE FROM BOOK_AUTHORS WHERE Book_id = 101;

-- Step 4: Delete from BOOK
DELETE FROM BOOK WHERE Book_id = 101;
Query4:
-- Must use InnoDB and define partition column in PRIMARY KEY
CREATE TABLE BOOK (
    Book_id INT,
    Title VARCHAR(200),
    Publisher_Name VARCHAR(100),
    Pub_Year YEAR,
    PRIMARY KEY(Book_id, Pub_Year)
)
PARTITION BY RANGE (Pub_Year) (
    PARTITION p0 VALUES LESS THAN (2000),
    PARTITION p1 VALUES LESS THAN (2010),
    PARTITION p2 VALUES LESS THAN (2020),
    PARTITION p3 VALUES LESS THAN MAXVALUE
);
Query5:
CREATE VIEW View_Book_Availability AS
SELECT 
    B.Book_id, 
    B.Title, 
    SUM(BC.No_of_Copies) AS Total_Copies
FROM 
    BOOK B
JOIN 
    BOOK_COPIES BC ON B.Book_id = BC.Book_id
GROUP BY 
    B.Book_id, B.Title;

company database:
CREATE TABLE EMPLOYEE (
    SSN CHAR(9) PRIMARY KEY,
    Name VARCHAR(100),
    Address VARCHAR(200),
    Sex CHAR(1),
    Salary DECIMAL(10,2),
    SuperSSN CHAR(9),
    DNo INT,
    FOREIGN KEY (SuperSSN) REFERENCES EMPLOYEE(SSN),
    FOREIGN KEY (DNo) REFERENCES DEPARTMENT(DNo)
);
Query1:
SELECT DISTINCT P.PNo
FROM PROJECT P
WHERE EXISTS (
    SELECT 1
    FROM EMPLOYEE E
    WHERE E.Name LIKE '%Scott'
      AND (
        E.SSN IN (SELECT SSN FROM WORKS_ON WHERE WORKS_ON.PNo = P.PNo)
        OR E.SSN = (SELECT MgrSSN FROM DEPARTMENT D WHERE D.DNo = P.DNo)
      )
);
Query2:
SELECT E.SSN, E.Name, E.Salary, E.Salary * 1.10 AS New_Salary
FROM EMPLOYEE E
WHERE E.SSN IN (
    SELECT W.SSN
    FROM WORKS_ON W
    JOIN PROJECT P ON W.PNo = P.PNo
    WHERE P.PName = 'IoT'
);
Query3:
SELECT 
    SUM(E.Salary) AS Total_Salary,
    MAX(E.Salary) AS Max_Salary,
    MIN(E.Salary) AS Min_Salary,
    AVG(E.Salary) AS Avg_Salary
FROM EMPLOYEE E
JOIN DEPARTMENT D ON E.DNo = D.DNo
WHERE D.DName = 'Accounts';
Query4:SELECT E.Name
FROM EMPLOYEE E
WHERE NOT EXISTS (
    SELECT P.PNo
    FROM PROJECT P
    WHERE P.DNo = 5
    EXCEPT
    SELECT W.PNo
    FROM WORKS_ON W
    WHERE W.SSN = E.SSN
);
Query5:
SELECT E.DNo, COUNT(*) AS High_Earner_Count
FROM EMPLOYEE E
WHERE E.Salary > 600000
AND E.DNo IN (
    SELECT DNo
    FROM EMPLOYEE
    GROUP BY DNo
    HAVING COUNT(*) > 5
)
GROUP BY E.DNo;

Movie Database:
Query1:
SELECT M.Mov_Title
FROM MOVIES M
JOIN DIRECTOR D ON M.Dir_id = D.Dir_id
WHERE D.Dir_Name = 'Hitchcock';
query2:
SELECT DISTINCT M.Mov_Title
FROM MOVIES M
JOIN MOVIE_CAST MC ON M.Mov_id = MC.Mov_id
WHERE MC.Act_id IN (
    SELECT Act_id
    FROM MOVIE_CAST
    GROUP BY Act_id
    HAVING COUNT(DISTINCT Mov_id) >= 2
);
Query4:
SELECT M.Mov_Title, MAX(R.Rev_Stars) AS Max_Stars
FROM MOVIES M
JOIN RATING R ON M.Mov_id = R.Mov_id
GROUP BY M.Mov_Title
ORDER BY M.Mov_Title;
 Query3:
SELECT DISTINCT A.Act_Name
FROM ACTOR A
JOIN MOVIE_CAST MC1 ON A.Act_id = MC1.Act_id
JOIN MOVIES M1 ON MC1.Mov_id = M1.Mov_id
JOIN MOVIE_CAST MC2 ON A.Act_id = MC2.Act_id
JOIN MOVIES M2 ON MC2.Mov_id = M2.Mov_id
WHERE M1.Mov_Year < 2000 AND M2.Mov_Year > 2015;
Query5:
UPDATE RATING
SET Rev_Stars = 5
WHERE Mov_id IN (
    SELECT M.Mov_id
    FROM MOVIES M
    JOIN DIRECTOR D ON M.Dir_id = D.Dir_id
    WHERE D.Dir_Name = 'Steven Spielberg'
);


